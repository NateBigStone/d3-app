{"version":3,"sources":["components/chart/chart.js","components/map/map.js","App.js","serviceWorker.js","index.js"],"names":["Component","getData","numItems","Math","floor","random","data","i","xRand","yRand","rRand","push","x","y","r","color","colors","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleClick","bind","assertThisInitialized","setState","xScale","d3","domain","range","width","yScale","height","rScale","points","map","d","react_default","a","createElement","cx","cy","fill","onClick","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAMoBA,kBCDpB,SAASC,IAGL,IAFA,IAAIC,EAAW,GAAKC,KAAKC,MAAM,GAAKD,KAAKE,UACrCC,EAAO,GACHC,EAAE,EAAGA,EAAEL,EAAUK,IAAK,CAC1B,IAAIC,EAAQL,KAAKE,SACbI,EAAQN,KAAKE,SACbK,EAAQP,KAAKE,SACjBC,EAAKK,KAAK,CACPC,EAAGJ,EACHK,EAAGJ,EACHK,EAAGJ,EACHK,MAAO,IAEVT,EAAKK,KAAK,CACPC,EAAGJ,EACHK,EAAGJ,EACHK,EAAU,IAANJ,EACJK,MAAO,IAEVT,EAAKK,KAAK,CACPC,EAAGJ,EACHK,EAAGJ,EACHK,EAAU,IAANJ,EACJK,MAAO,IAGd,OAAOT,EAGX,IAAIU,EAAS,CAAC,UAAW,WAkCVC,cA/BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACTpB,KAAML,KAGVkB,EAAKQ,YAAcR,EAAKQ,YAAYC,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IAPJA,6EAWfG,KAAKQ,SAAS,CACVxB,KAAML,uCAKV,IACI8B,EAASC,MAAiBC,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAAGZ,KAAKJ,MAAMiB,QAC9DC,EAASJ,MAAiBC,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAAGZ,KAAKJ,MAAMmB,SAC9DC,EAASN,MAAiBC,OAAO,CAAC,EAAG,IAAIC,MAAM,CAAC,EAHpC,KAKZK,EAASjB,KAAKI,MAAMpB,KAAKkC,IAAI,SAAAC,GAAC,OAAIC,EAAAC,EAAAC,cAAA,UAAQC,GAAId,EAAOU,EAAE7B,GAAIkC,GAAIV,EAAOK,EAAE5B,GAAIC,EAAGwB,EAAOG,EAAE3B,GAAIiC,KAAM/B,EAAOyB,EAAE1B,WAE/G,OAAO2B,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,OAAKT,MAAOb,KAAKJ,MAAMiB,MAAOE,OAAQf,KAAKJ,MAAMmB,QAASE,GAC1DG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQI,QAAS1B,KAAKK,aAAtB,mBA3BCsB,IAAMjD,WCvBTkD,MARf,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACXT,EAAAC,EAAAC,cAACJ,EAAD,CAAKL,MAAO,IAAKE,OAAQ,QCIbe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c958baca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../App.css';\nimport * as d3 from 'd3';\n\n\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            data: [\n                {letter: 'A', frequency: .08167},\n                {letter: 'B', frequency: .01492},\n                {letter: 'C', frequency: .02782},\n                {letter: 'D', frequency: .04253},\n                {letter: 'E', frequency: .12702},\n                {letter: 'F', frequency: .02288},\n                {letter: 'G', frequency: .02015},\n                {letter: 'H', frequency: .06094},\n                {letter: 'I', frequency: .06966},\n                {letter: 'J', frequency: .00153},\n                {letter: 'K', frequency: .00772},\n                {letter: 'L', frequency: .04025},\n                {letter: 'M', frequency: .02406},\n                {letter: 'N', frequency: .06749},\n                {letter: 'O', frequency: .07507},\n                {letter: 'P', frequency: .01929},\n                {letter: 'Q', frequency: .00095},\n                {letter: 'R', frequency: .05987},\n                {letter: 'S', frequency: .06327},\n                {letter: 'T', frequency: .09056},\n                {letter: 'U', frequency: .02758},\n                {letter: 'V', frequency: .00978},\n                {letter: 'W', frequency: .02360},\n                {letter: 'X', frequency: .00150},\n                {letter: 'Y', frequency: .01974},\n                {letter: 'Z', frequency: .00074}]\n        };\n    }\n\n    componentDidMount() {\n\n        let data = this.state.data\n        let canvas = this.canvas;\n        let context = canvas.getContext('2d');\n\n        let margin = {top: 20, right: 20, bottom: 30, left: 40},\n            width = canvas.width - margin.left - margin.right,\n            height = canvas.height - margin.top - margin.bottom;\n\n        let x = d3.scaleBand()\n            .rangeRound([0, width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .rangeRound([height, 0]);\n\n        context.translate(margin.left, margin.top);\n\n        x.domain(data.map((d) => d.letter));\n        y.domain([0, d3.max(data, (d) => d.frequency)]);\n\n        let yTickCount = 10,\n            yTicks = y.ticks(yTickCount),\n            yTickFormat = y.tickFormat(yTickCount, \"%\");\n\n        context.beginPath();\n        x.domain().forEach((d) => {\n            context.moveTo(x(d) + x.bandwidth() / 2, height);\n            context.lineTo(x(d) + x.bandwidth() / 2, height + 6);\n        });\n        context.strokeStyle = \"black\";\n        context.stroke();\n\n        context.textAlign = \"center\";\n        context.textBaseline = \"top\";\n        x.domain().forEach((d) => {\n            context.fillText(d, x(d) + x.bandwidth() / 2, height + 6);\n        });\n\n        context.beginPath();\n        yTicks.forEach((d) => {\n            context.moveTo(0, y(d) + 0.5);\n            context.lineTo(-6, y(d) + 0.5);\n        });\n        context.strokeStyle = \"black\";\n        context.stroke();\n\n        context.textAlign = \"right\";\n        context.textBaseline = \"middle\";\n        yTicks.forEach((d) => {\n            context.fillText(yTickFormat(d), -9, y(d));\n        });\n\n        context.beginPath();\n        context.moveTo(-6.5, 0 + 0.5);\n        context.lineTo(0.5, 0 + 0.5);\n        context.lineTo(0.5, height + 0.5);\n        context.lineTo(-6.5, height + 0.5);\n        context.strokeStyle = \"black\";\n        context.stroke();\n\n        context.save();\n        context.rotate(-Math.PI / 2);\n        context.textAlign = \"right\";\n        context.textBaseline = \"top\";\n        context.font = \"bold 10px sans-serif\";\n        context.fillText(\"Frequency\", -10, 10);\n        context.restore();\n\n        context.fillStyle = \"steelblue\";\n        data.forEach((d) => {\n            context.fillRect(x(d.letter), y(d.frequency), x.bandwidth(), height - y(d.frequency));\n        });\n\n    }\n\n    render() {\n        return <div>\n            <h1>Chart</h1>\n            <canvas width={960} height={500} ref={(el) => { this.canvas = el }} />\n        </div>\n    }\n}\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport '../../App.css';\nimport * as d3 from 'd3';\n\n\nfunction getData() {\n    let numItems = 20 + Math.floor(20 * Math.random())\n    let data = []\n    for(let i=0; i<numItems; i++) {\n        let xRand = Math.random()\n        let yRand = Math.random()\n        let rRand = Math.random()\n        data.push({\n           x: xRand,\n           y: yRand,\n           r: rRand,\n           color: 0\n        })\n        data.push({\n           x: xRand,\n           y: yRand,\n           r: (rRand*.66),\n           color: 1\n        })    \n        data.push({\n           x: xRand,\n           y: yRand,\n           r: (rRand*.36),\n           color: 0\n        })             \n    }\n    return data\n}\n\nlet colors = ['#cc0000', '#ffffff']\n\nclass Map extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            data: getData()\n        }\n\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    handleClick() {\n        this.setState({\n            data: getData()\n        })\n    }\n\n    render() {\n        let maxRadius = 40\n        let xScale = d3.scaleLinear().domain([0, 1]).range([0, this.props.width])\n        let yScale = d3.scaleLinear().domain([0, 1]).range([0, this.props.height])\n        let rScale = d3.scaleLinear().domain([0, 1]).range([0, maxRadius])\n\n        let points = this.state.data.map(d => <circle cx={xScale(d.x)} cy={yScale(d.y)} r={rScale(d.r)} fill={colors[d.color]} />)\n\n        return <div>\n            <svg width={this.props.width} height={this.props.height}>{points}</svg>\n            <div><button onClick={this.handleClick}>Update</button></div>\n        </div>\n    }\n}\n\nexport default Map;\n","import React from 'react';\nimport './App.css';\nimport Chart from './components/chart/chart.js'\nimport Map from './components/map/map.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Map width={800} height={600} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}